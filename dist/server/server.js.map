{"version":3,"sources":["server.js"],"names":["path","require","jsdom","express","app","server","Server","Datauri","datauri","JSDOM","io","listen","use","static","get","req","res","sendFile","setupAuthoritativePhaser","fromFile","runScripts","resources","pretendToBeVisual","then","dom","window","URL","createObjectURL","blob","format","type","Object","getOwnPropertySymbols","buffer","content","revokeObjectURL","objectURL","gameLoaded","console","log","address","port","catch","error","message"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB,EAEA;AACA;;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIG,GAAG,GAAGD,OAAO,EAAjB,EAAqB;AACrB;AACA;;AACA,IAAIE,MAAM,GAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgBK,MAAhB,CAAuBF,GAAvB,CAAb;;AAEA,MAAMG,OAAO,GAAGN,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMO,OAAO,GAAG,IAAID,OAAJ,EAAhB;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAYP,KAAlB,EAAyB;AAEzB;AACA;AACA;;AACA,IAAIQ,EAAE,GAAGT,OAAO,CAAC,WAAD,CAAP,CAAqBU,MAAre,WAAf,CAAR,GAAqC;AAGrC;;AACAT,GAAG,CAACU,GAAJ,CAAQ,GAAR,EAAa,UAASC,GAAT,EAAcC,GAAd,EAAkB;AAC3BA,EAAAA,GAAG,CAACC,QAAJ,CAAa,eAAb,EAD2B,CACG;AACjC,CAFD,GAGA;AACA;AACA;AACA;AAEA;;AACA,SAASC,wBAAT,GAAoC;AAChCT,EAAAA,KAAK,CAACU,QAAN,CAAe,mCAAf,EAAoD;AAAC;AACnD;AACAC,IAAAA,UAAU,EAAE,aAFsC;AAGlD;AACAC,IAAAA,SAAS,EAAE,QAJuC;AAKlD;AACAC,IAAAA,iBAAiB,EAAE;AAN+B,GAApD,EAOGC,IAPH,CAOSC,GAAD,IAAS;AAAE;AACf;AACAA,IAAAA,GAAG,CAACC,MAAJ,CAAWC,GAAX,CAAeC,eAAf,GAAkCC,IAAD,IAAU;AACvC,UAAIA,IAAJ,EAAU;AACN,eAAOpB,OAAO,CAACqB,MAAR,CACHD,IAAI,CAACE,IADF,EAEHF,IAAI,CAACG,MAAM,CAACC,qBAAP,CAA6BJ,IAA7B,EAAmC,CAAnC,CAAD,CAAJ,CAA4CK,MAFzC,EAGLC,OAHF;AAIH;AACJ,KAPD;;AAQAV,IAAAA,GAAG,CAACC,MAAJ,CAAWC,GAAX,CAAeS,eAAf,GAAkCC,SAAD,IAAe,CAAE,CAAlD,CAVa,CAWb;;;AACAZ,IAAAA,GAAG,CAACC,MAAJ,CAAWY,UAAX,GAAwB,MAAM;AAC1BhC,MAAAA,MAAM,CAACM,MAAP,CAAc,IAAd,EAAoB,YAAY;AAC5B2B,QAAAA,OAAO,CAACC,GAAR,CAAa,gBAAelC,MAAM,CAACmC,OAAP,GAAiBC,IAAK,EAAlD;AACH,OAFD;AAGH,KAJD,CAZa,CAiBb;AACA;AACA;;;AACAjB,IAAAA,GAAG,CAACC,MAAJ,CAAWf,EAAX,GAAgBA,EAAhB;AACH,GA5BD,EA4BGgC,KA5BH,CA4BUC,KAAD,IAAW;AAChBL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACC,OAAlB;AACC,GA9BL;AA+BH;;AAED1B,wBAAwB,IAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"server.js","sourceRoot":"../../server","sourcesContent":["\n// for headless authoritative server game instance\nconst path = require('path');\nconst jsdom = require('jsdom');\n\n// express is a web framework that will help us\n// render our static files\nvar express = require('express');\nvar app = express(); // new express instance\n// supply the app to the HTTP server, which will\n// allow express to handle the HTTP requests\nvar server = require('http').Server(app);\n\nconst Datauri = require('datauri');\nconst datauri = new Datauri();\nconst { JSDOM } = jsdom; // for headless authoritative server game instance\n\n// require socket.io, a module that allows for\n// bi-directional communication between server and client\n// Then, make the module listen to our server object\nvar io = require('socket.io').listen(server);\n\n/// TODO clean stuff moved to auth../game.js\n// // // // players object: store data about the players\n// // // var players = {};\n\n// // // all projectiles flying around\n// // var bullets = [];\n\n// // collectibles TODO change\n// var star = {\n//     x: Math.floor(Math.random()*700)+50,\n//     y: Math.floor(Math.random()*700)+50\n// };\n\n// // scores TODO change\n// var scores = {\n//     blue: 0,\n//     red: 0\n// };\n\n// // logic to listen for connections and disconnections\n// io.on('connection', function(socket){\n//     console.log('a user connected');\n//     // create a new player and add it to our players object\n//     // assign to it a position, and id, and a random team\n//     players[socket.id] = {\n//         rotation: 0,\n//         x: Math.floor(Math.random()*700) + 50,\n//         y: Math.floor(Math.random()*500) + 50,\n//         playerId: socket.id,\n//         team: (Math.floor(Math.random()*2)===0)?'red':'blue'\n//     };\n    \n//     // emit events ...\n\n//     // send the players object to the new player\n//     // .emit just emits the event to the current\n//     // client (the player that has just connected)\n//     // We are passing the players object to the\n//     // new peer, so that he can populate his screen\n//     console.log('emitting currentPlayers event');\n//     socket.emit('currentPlayers', players);\n\n//     // emit collectible stars\n//     console.log('emit star location');\n//     socket.emit('starLocation', star);\n\n//     // emit scores\n//     console.log('emit scores');\n//     socket.emit('scoreUpdate', scores);\n    \n//     // update all other players of the new player\n//     // .broadcast.emit emits the event to all other\n//     // sockets (the existing players)\n//     // We are passing the data of the new player to\n//     // all other players, so that they can update\n//     console.log('emitting newPlayer event to all the other peers')\n//     socket.broadcast.emit('newPlayer',players[socket.id]);\n    \n    \n//     // react to events ...\n\n//     // add peer disconnect callback\n//     socket.on('disconnect', function(){\n//         // when this peers disconnects...\n//         console.log('user disconnected');\n//         // remove this player from our player object\n//         delete players[socket.id];\n//         // emit a message to all players to remove this player\n//         io.emit('disconnect', socket.id);\n//     });\n\n//     // callback for playerMovement event\n//     // (event fired by a player who is moving and has\n//     // changed its state)\n//     socket.on('clientPlayerMoved', function(movementData){\n//         //console.log(`storing position for ${socket.id}. Broadcasting.`);\n//         // update this player's data on the server\n//         players[socket.id].x = movementData.x;\n//         players[socket.id].y = movementData.y;\n//         players[socket.id].rotation = movementData.rotation;\n//         // broadcast a message about the player that moved\n//         socket.broadcast.emit('serverPlayerMoved', players[socket.id]);\n//     });\n\n//     socket.on('clientShot', function(bulletData){\n//         bullets.push();\n//     });\n\n//     // when a player collects a star, it signals\n//     // it to the server. The server stores the info,\n//     // and bounces-broadcast back update events\n//     socket.on('starCollected', function(){\n//         if (players[socket.id].team === 'red'){\n//             scores.red += 10;\n//         } else {\n//             scores.blue += 10;\n//         }\n//         // spawn new star\n//         star.x = Math.floor(Math.random()*700) + 50;\n//         star.y = Math.floor(Math.random()*500) + 50;\n        \n//         // emit events with new star location and\n//         // updated scores\n//         console.log('emitting star location and scores');\n//         io.emit('starLocation', star);\n//         io.emit('scoreUpdate', scores);\n//     })\n// });\n\n/// TODO start from here to make phaser and socket available locally instead of\n/// from CDN. Check https://stackoverflow.com/questions/27464168/how-to-include-scripts-located-inside-the-node-modules-folder\n// app.get('/phaser.min.js', function(req, res) {\n//     res.sendFile(__dirname + '/../node_modules/phaser/dist/phaser.min.js');\n// });\n// app.get('/socket.io/socket.io.js', function(req, res) {\n//     res.sendFile(__dirname + '/../node_modules/socket.io-client/dist/socket.io.js');\n// });\n\n\n// update the server to rendere static files using\n// the express.static middleware function\napp.use(express.static('../public'));//__dirname + '/../public'));\n\n\n// serve the index.html as the root page ('/')\napp.get('/', function(req, res){\n    res.sendFile('../index.html');//__dirname + '/../index.html');\n});\n// // make the server listen on port 8081\n// server.listen(8081, function(){\n//     console.log(`Listening on ${server.address().port}`);\n// });\n\n// run game instance on authoritative server\nfunction setupAuthoritativePhaser() {\n    JSDOM.fromFile('./authoritative_server/index.html', {//path.join(__dirname, 'authoritative_server/index.html'), {\n      // To run the scripts in the html file\n      runScripts: \"dangerously\",\n      // Also load supported external resources\n      resources: \"usable\",\n      // So requestAnimatinFrame events fire\n      pretendToBeVisual: true\n    }).then((dom) => { // listen for clients only when game instance on server is ready\n        // datauri - to avoid error on server\n        dom.window.URL.createObjectURL = (blob) => {\n            if (blob) {\n                return datauri.format(\n                    blob.type,\n                    blob[Object.getOwnPropertySymbols(blob)[0]].buffer\n                ).content;\n            }\n        };\n        dom.window.URL.revokeObjectURL = (objectURL) => {};\n        // on the event gameLoaded, start listening\n        dom.window.gameLoaded = () => {\n            server.listen(8081, function () {\n                console.log(`Listening on ${server.address().port}`);\n            });\n        };\n        // inject socket.io instance into jsdom, which\n        // will allow us to access it in our Phaser\n        // code that is running on the server\n        dom.window.io = io;\n    }).catch((error) => {\n        console.log(error.message);\n        });\n}\n\nsetupAuthoritativePhaser();\n\n// (async function(){\n//     global.dom = await JSDOM.fromFile('../public/index.html', {\n//       // To run the scripts in the html file\n//       runScripts: \"dangerously\",\n//       // Also load supported external resources\n//       resources: \"usable\",\n//       // So requestAnimatinFrame events fire\n//       pretendToBeVisual: true\n//     })\n//   })();\n"]}